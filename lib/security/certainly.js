// Generated by CoffeeScript 1.7.1
(function() {
  var certgen, fs, genCA, genCABundle, genKey, init, inspect, newCSR, notPresent, pkcs12, puts, sign, signCSR;

  fs = require("fs");

  puts = require("util").debug;

  inspect = require("util").inspect;

  certgen = require("security/certgen");

  init = function(config, temp) {
    certgen.CONFIG_DIR = config;
    return certgen.TEMP_DIR = temp;
  };

  notPresent = function(certRequest, required) {
    var v, _i, _len;
    for (_i = 0, _len = required.length; _i < _len; _i++) {
      v = required[_i];
      if (!certRequest[v]) {
        return v;
      }
    }
    return false;
  };

  genCA = function(certRequest, callback) {
    var err, error, subject;
    error = null;
    if (err = notPresent(certRequest, ["subject", "daysValidFor"])) {
      throw Error("You must supply subject & daysValidFor");
    }
    subject = certRequest.subject;
    return certgen.genSelfSigned(subject, certRequest.daysValidFor, function(err, key, cert) {
      if (err != null) {
        return callback(err);
      }
      certRequest.privateKey = key.toString();
      certRequest.cert = cert.toString();
      certRequest.selfSigned = true;
      return callback(null, certRequest);
    });
  };

  genKey = function(certRequest, callback) {
    return certgen.genKey(function(err, privateKey) {
      if (err != null) {
        return callback(err);
      }
      certRequest.privateKey = privateKey.toString();
      return callback(null, certRequest);
    });
  };

  newCSR = function(certRequest, callback) {
    var error;
    if (error = notPresent(certRequest, ["subject", "privateKey"])) {
      return callback(Error("You must supply a subject and privateKey"));
    }
    return certgen.genCSR(certRequest.privateKey, certRequest.subject, function(err, csr) {
      var result;
      if (err != null) {
        return callback(err);
      }
      result = {
        signee: certRequest,
        csr: csr.toString()
      };
      return callback(null, result);
    });
  };

  signCSR = function(csrRequest, callback) {
    var caCert, caKey, error;
    caCert = caKey = "";
    if (error = notPresent(csrRequest, ["csr", "signer", "signee"])) {
      return callback(new Error("You must supply signer & signee"));
    }
    return certgen.signCSR(csrRequest.csr, csrRequest.signer.cert, csrRequest.signer.privateKey, csrRequest.signee.daysValidFor, function(err, finalCert) {
      if (err != null) {
        return callback(err);
      }
      csrRequest.signee.cert = finalCert.toString();
      csrRequest.signee.signer = csrRequest.signer;
      return callback(null, csrRequest.signee);
    });
  };

  genCABundle = function(certificate) {
    var ca;
    ca = certificate.cert;
    if (certificate.signer) {
      ca += genCABundle(certificate.signer);
    }
    return ca;
  };

  pkcs12 = function(certRequest, callback) {
    var ca, certificate;
    if (!((certRequest.certificate != null) && (certRequest.caBundle != null))) {
      return callback(Error("You must supply a certificate and caBundle."));
    }
    ca = certRequest.caBundle;
    certificate = certRequest.certificate;
    puts(ca);
    if (certificate.privateKey != null) {
      return certgen.pkcs12(certificate.privateKey, certificate.cert, ca, certificate.subject.CN, function(err, pkcs) {
        if (err != null) {
          return callback(err);
        }
        certRequest.certificate.pkcs12 = pkcs.toString("base64");
        return callback(null, certRequest);
      });
    } else {
      return certgen.pcs12(certificate.cert, ca, certificate.subject.CN, function(err, pkcs) {
        if (err != null) {
          throw err;
        }
        certRequest.certificate.pkcs12 = pkcs.toString("base64");
        return callback(null, certRequest);
      });
    }
  };

  sign = function(certRequest, callback) {
    var error;
    if (error = notPresent(certRequest, ["cert", "privateKey", "ca", "message"])) {
      return reporterror(response, "You must supply a " + error);
    }
    certgen.sign(certRequest.cert, certRequest.privateKey, certRequest.ca, new Buffer(certRequest.message, "base64"), function(error, results) {});
    puts(results.toString("base64"));
    return callback(null, {
      result: results.toString("base64")
    });
  };

  exports.genCA = genCA;

  exports.genKey = genKey;

  exports.newCSR = newCSR;

  exports.signCSR = signCSR;

  exports.pkcs12 = pkcs12;

  exports.sign = sign;

  exports.init = init;

}).call(this);
