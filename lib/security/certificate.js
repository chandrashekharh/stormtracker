// Generated by CoffeeScript 1.6.1
(function() {
  var Certificate, CertificateRegistry, StormData, StormRegistry, jsonschema,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jsonschema = require("json-schema");

  StormRegistry = require("stormagent").StormRegistry;

  StormData = require("stormagent").StormData;

  Certificate = (function(_super) {
    var certificateSchema;

    __extends(Certificate, _super);

    certificateSchema = {
      name: "Certificate",
      type: "object",
      additionalProperties: {},
      properties: {
        id: {
          "type": "string",
          "required": false
        },
        privateKey: {
          "type": "string",
          "required": false
        },
        cert: {
          "type": "string",
          "required": false
        },
        daysValidFor: {
          "type": "number",
          "required": true
        },
        signer: {
          "type": "string",
          "required": false
        },
        selfSigned: {
          "type": "boolean",
          "required": true
        },
        signedOn: {
          "type": "number",
          "required": false
        },
        upstream: {
          "type": "boolean",
          "required": false
        },
        downstream: {
          "type": "boolean",
          "required": false
        },
        subject: {
          type: "object",
          required: true,
          additionalProperties: {
            "type": "string"
          },
          properties: {
            C: {
              "type": "string",
              "required": true
            },
            ST: {
              "type": "string",
              "required": true
            },
            L: {
              "type": "string",
              "required": true
            },
            O: {
              "type": "string",
              "required": true
            },
            OU: {
              "type": "string",
              "required": true
            },
            CN: {
              "type": "string",
              "required": true
            },
            emailAddress: {
              "type": "string",
              "required": true
            },
            subjectAltName: {
              "type": "string",
              "required": true
            },
            nsComment: {
              "type": "string",
              "required": true
            },
            pathlen: {
              "type": "number",
              "required": true
            },
            CA: {
              "type": "boolean",
              "required": true
            }
          }
        }
      }
    };

    function Certificate(id, data) {
      Certificate.__super__.constructor.call(this, id, data, certificateSchema);
    }

    return Certificate;

  })(StormData);

  CertificateRegistry = (function(_super) {

    __extends(CertificateRegistry, _super);

    function CertificateRegistry(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new Certificate(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(key, val);
        }
      });
      this.on('removed', function(certificate) {
        if (certificate.destroy != null) {
          return certificate.destroy();
        }
      });
      CertificateRegistry.__super__.constructor.call(this, filename);
    }

    CertificateRegistry.prototype.get = function(key) {
      var entry;
      return entry = CertificateRegistry.__super__.get.call(this, key);
    };

    return CertificateRegistry;

  })(StormRegistry);

  exports.Certificate = Certificate;

  exports.CertificateRegistry = CertificateRegistry;

}).call(this);
