// Generated by CoffeeScript 1.6.1
(function() {
  var AgentsData, AgentsManager, AgentsRegistry, CertificateManager, StormAgent, StormData, StormRegistry, auth, jsonschema, query, util, uuid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jsonschema = require("json-schema");

  uuid = require("node-uuid");

  CertificateManager = require("http/certs").CertificateManager;

  query = require("dirty-query").query;

  auth = require("http/auth").authorization;

  util = require("util");

  StormAgent = require("stormagent");

  StormData = StormAgent.StormData;

  StormRegistry = StormAgent.StormRegistry;

  AgentsData = (function(_super) {
    var agentSchema;

    __extends(AgentsData, _super);

    agentSchema = {
      name: "Agent",
      type: "object",
      additionalProperties: {},
      properties: {
        id: {
          "type": "string",
          "required": false
        },
        stoken: {
          "type": "string",
          "required": true
        },
        serialKey: {
          "type": "string",
          "required": false
        },
        saved: {
          "type": "boolean",
          "required": false
        },
        lastActivation: {
          "type": "string",
          "required": false
        },
        bolt: {
          type: "object",
          required: true,
          additionalProperties: true,
          properties: {
            uplinks: {
              type: "array",
              items: {
                type: "string",
                required: false
              }
            },
            uplinkStrategy: {
              type: "string",
              required: false
            },
            allowRelay: {
              type: "boolean",
              required: false
            },
            relayPort: {
              type: "number",
              required: false
            },
            allowedPorts: {
              type: "array",
              items: {
                type: "number",
                required: false
              }
            },
            listenPort: {
              type: "number",
              required: false
            },
            beaconInterval: {
              type: "number",
              required: false
            },
            beaconRetry: {
              type: "number",
              required: false
            },
            beaconValidity: {
              type: "number",
              required: false
            },
            ca: {
              type: "object",
              required: false,
              properties: {
                encoding: {
                  "type": "string",
                  "required": true
                },
                data: {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        }
      }
    };

    function AgentsData(id, data) {
      AgentsData.__super__.constructor.call(this, id, data, agentSchema);
    }

    return AgentsData;

  })(StormData);

  AgentsRegistry = (function(_super) {

    __extends(AgentsRegistry, _super);

    function AgentsRegistry(filename) {
      this.on("load", function(key, val) {
        var entry;
        entry = new AgentsData(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(key, val);
        }
      });
      this.on('removed', function(entry) {
        if (entry.destroy != null) {
          return entry.destroy();
        }
      });
      AgentsRegistry.__super__.constructor.call(this, filename);
    }

    AgentsRegistry.prototype.get = function(key) {
      var entry;
      return entry = AgentsRegistry.__super__.get.call(this, key);
    };

    return AgentsRegistry;

  })(StormRegistry);

  AgentsManager = (function() {

    function AgentsManager(db, certMangr) {
      this.db = db;
      this.stormsigner = global.config.stormsigner;
      this.CM = certMangr;
    }

    AgentsManager.prototype.update = function(id, agent) {
      var _agent;
      _agent = this.db.get(id);
      if (_agent == null) {
        return null;
      }
      if (this.validate(agent)) {
        return this.db.add(_agent.id, agent);
      }
    };

    AgentsManager.prototype.create = function(agent) {
      agent.id = uuid.v4();
      this.db.add(agent.id, agent);
      return agent;
    };

    AgentsManager.prototype.getAgent = function(id) {
      return this.db.get(id);
    };

    AgentsManager.prototype.getAgentBySerial = function(serialKey) {
      var agents;
      agents = query(this.db.db, {
        "serialKey": serialKey
      });
      if (agents != null) {
        return agents[0];
      }
    };

    AgentsManager.prototype.deleteAgent = function(id) {
      return this.db.rm(id);
    };

    AgentsManager.prototype.loadCaBundle = function(agent) {
      agent.bolt.ca = {
        encoding: "base64",
        data: new Buffer(this.CM.signerBundle(this.stormsigner)).toString("base64")
      };
      return agent;
    };

    return AgentsManager;

  })();

  this.include = function() {
    var AM;
    AM = this.settings.agent.AM;
    this.post({
      "/agents": function() {
        var agent;
        try {
          agent = AM.create(this.body);
          return this.send(AM.loadCaBundle(agent));
        } catch (error) {
          console.log("Error:" + error);
          return this.response.send(400, error);
        }
      }
    });
    this.put("/agents/:id", auth, function() {
      try {
        if (AM.validate(this.body)) {
          return this.send(AM.update(this.body.id, this.body));
        }
      } catch (error) {
        return this.response.send(400, error);
      }
    });
    this.put({
      "/agents/:id/status/:status": function() {
        var agent;
        agent = this.db.get(this.params.id);
        if (agent != null) {
          agent.status = this.params.status;
          AM.update(this.params.id, agent);
        } else {
          this.send(404);
        }
        return this.send(204);
      }
    });
    this.get("/agents/:id", auth, function() {
      var agent;
      agent = AM.getAgent(this.params.id);
      if (agent != null) {
        return this.send(AM.loadCaBundle(agent));
      } else {
        return this.send(404);
      }
    });
    this.get("/agents/:id/bolt", auth, function() {
      var agent;
      agent = AM.getAgent(this.params.id);
      if (agent != null) {
        return this.send(AM.loadCaBundle(agent).bolt);
      } else {
        return this.send(404);
      }
    });
    this.get("/agents/serialkey/:key", auth, function() {
      var agent;
      agent = AM.getAgentBySerial(this.params.key);
      if (agent != null) {
        return this.send({
          "id": agent.id,
          "serialkey": this.params.key
        });
      } else {
        return this.send(404);
      }
    });
    this.post("/agents/:id/csr", auth, function() {
      var csrRequest,
        _this = this;
      util.log("CSR for agent " + this.params.id);
      if ((AM.getAgent(this.params.id)) != null) {
        csrRequest = {
          csr: this.body.file,
          signee: {
            "daysValidFor": global.config.signerChain.days
          },
          signer: AM.CM.get(AM.stormsigner)
        };
        return AM.CM.signCSR(csrRequest, function(err, cert) {
          if (err != null) {
            return _this.response.send(400);
          }
          return _this.response.send({
            "encoding": "base64",
            "data": new Buffer(cert.cert).toString("base64")
          });
        });
      } else {
        return this.send(404);
      }
    });
    return this.del("/agents/:id", {
      auth: function() {
        if ((this.db.get(this.params.id)) != null) {
          this.db.rm(this.params.id);
          this.send(204);
          return;
        }
        return this.send(404);
      }
    });
  };

  exports.AgentsManager = AgentsManager;

  exports.AgentsRegistry = AgentsRegistry;

}).call(this);
