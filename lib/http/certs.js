// Generated by CoffeeScript 1.7.1
(function() {
  var CertificateFactory, CertificateManager, CertificateRegistry, auth, certainly, passport, util, uuid;

  certainly = require('../security/certainly');

  uuid = require("node-uuid");

  CertificateRegistry = require('../security/certificate').CertificateRegistry;

  auth = require('../http/auth').authenticate;

  util = require("util");

  CertificateFactory = (function() {
    function CertificateFactory(db) {
      this.db = db;
      this.CM = new CertificateManager(__dirname + "/../../" + global.config.folders.config, global.config.folders.tmp, this.db);
    }

    CertificateFactory.prototype.init = function() {
      return this.db.on("ready", (function(_this) {
        return function() {
          var rootCert, signerChain, stormsigner;
          console.log("Finding the previously created signer chain " + global.config.stormsigner);
          stormsigner = _this.db.get(global.config.stormsigner);
          console.log("Signer:" + stormsigner);
          if (stormsigner != null) {
            util.log("Signer chain already exists..skipping creation");
          } else {
            signerChain = global.config.signerChain;
            rootCert = _this.CM.blankCert("root@clearpathnet.com", "email:copy", "StormTracker Root Signer", signerChain.days, true, true);
            rootCert.id = global.config.stormsigner;
            return _this.CM.create(rootCert, function(err, cert) {
              if (err != null) {
                util.log(JSON.stringify(err));
              }
              return util.log("Signer chain created");
            });
          }
        };
      })(this));
    };

    return CertificateFactory;

  })();

  CertificateManager = (function() {
    function CertificateManager(config, temp, db) {
      certainly.init(config, temp);
      this.db = db;
    }

    CertificateManager.prototype.loadSigners = function(cert) {
      var root;
      root = cert;
      while (root != null) {
        root.signer = this.db.get(root.signer);
        root = root.signer;
      }
      return cert;
    };

    CertificateManager.prototype.unloadSigners = function(cert) {
      var acert, root;
      root = cert;
      while (root.signer != null) {
        acert = root.signer;
        root.signer = acert.id;
        root = acert;
      }
      return cert;
    };

    CertificateManager.prototype.get = function(id) {
      return this.db.get(id);
    };

    CertificateManager.prototype.list = function() {
      var certs;
      certs = [];
      this.db.forEach(function(key, val) {
        return certs.push({
          "id": val.id,
          "subject": val.subject,
          "signer": val.signer
        });
      });
      return certs;
    };

    CertificateManager.prototype.resolveSigners = function(cert) {
      var certs, signer;
      certs = [cert];
      if (cert == null) {
        return certs;
      } else {
        signer = this.db.get(cert.signer);
        if (signer != null) {
          certs = certs.concat(this.resolveSigners(signer));
        }
      }
      return certs;
    };

    CertificateManager.prototype.signerBundle = function(id) {
      var c, cabundle, cert, _i, _len, _ref;
      cert = this.db.get(id);
      if (cert != null) {
        cabundle = "";
        _ref = this.resolveSigners(cert);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          cabundle += c.cert;
        }
        return cabundle;
      } else {
        return null;
      }
    };

    CertificateManager.prototype.blankCert = function(email, SAN, CN, days, isCA, selfSigned) {
      var certobj;
      return certobj = {
        "subject": {
          "emailAddress": email,
          "subjectAltName": SAN,
          "nsComment": "UUID:" + uuid.v4(),
          "pathlen": -1,
          "C": "US",
          "O": "ClearPath Networks",
          "OU": "VSP",
          "CA": isCA,
          "CN": CN,
          "L": "El Segundo",
          "ST": "CA"
        },
        "daysValidFor": days,
        "selfSigned": selfSigned,
        "upstream": false,
        "downstream": false
      };
    };

    CertificateManager.prototype.signCSR = function(csr, callback) {
      return certainly.signCSR(csr, (function(_this) {
        return function(err, cert) {
          if (err != null) {
            return callback(err);
          }
          cert = _this.unloadSigners(cert);
          return callback(null, cert);
        };
      })(this));
    };

    CertificateManager.prototype.create = function(cert, callback) {
      if (cert.selfSigned) {
        cert.signer = "";
        console.log("Creating self signed cert");
        return certainly.genCA(cert, (function(_this) {
          return function(err, cert) {
            var error;
            if (err != null) {
              return callback(err);
            }
            try {
              _this.db.add(cert.id, cert);
            } catch (_error) {
              error = _error;
              callback(error, null);
            }
            return callback(null, cert);
          };
        })(this));
      } else {
        console.log("Creating signed cert by " + cert.signer);
        return certainly.genKey(cert, (function(_this) {
          return function(err, ocert) {
            if (err != null) {
              return callback(err);
            }
            ocert = _this.loadSigners(ocert);
            return certainly.newCSR(ocert, function(err, csr) {
              if (err != null) {
                return callback(err);
              }
              csr.signer = ocert.signer;
              return certainly.signCSR(csr, function(err, cert) {
                var error;
                if (err != null) {
                  return callback(err);
                }
                cert = _this.unloadSigners(cert);
                try {
                  _this.db.add(cert.id, cert);
                } catch (_error) {
                  error = _error;
                  callback(error, null);
                }
                return callback(null, cert);
              });
            });
          };
        })(this));
      }
    };

    return CertificateManager;

  })();

  passport = require("passport");

  this.include = function() {
    var CM;
    CM = this.settings.agent.CF.CM;
    this.post({
      "/cert": function() {
        var Response;
        Response = this.response;
        return CM.create(this.body, (function(_this) {
          return function(err, cert) {
            if (err != null) {
              return _this.response.send(400, err);
            }
            return _this.response.send(cert);
          };
        })(this));
      }
    });
    this.get("/cert", auth, function() {
      return this.send(CM.list());
    });
    this.get({
      "/cert/:id/signerBundle": function() {
        var bundle;
        bundle = CM.signerBundle(this.params.id);
        if (bundle == null) {
          this.send(404);
          return;
        }
        this.response.set("ContentType", "application/x-pem-file");
        this.response.set("Content-Disposition", "attachment; filename=caBundle.pem");
        return this.send(bundle);
      }
    });
    this.get({
      "/cert/:id/publicKey": function() {
        var cert;
        cert = CM.get(this.params.id);
        if (cert != null) {
          this.response.set("ContentType", "application/x-pem-file");
          this.response.set("Content-Disposition", "attachment; filename=private.pem");
          return this.send(cert.cert);
        } else {
          return this.send(404);
        }
      }
    });
    this.get({
      "/cert/:id/privateKey": function() {
        var cert;
        cert = CM.get(this.params.id);
        if (cert != null) {
          this.response.set("ContentType", "application/x-pem-file");
          this.response.set("Content-Disposition", "attachment; filename=private.pem");
          return this.send(cert.privateKey);
        } else {
          return this.send(404);
        }
      }
    });
    return this.get({
      "/cert/:id": function() {
        var cert;
        cert = CM.get(this.params.id);
        if (cert != null) {
          return this.send(cert);
        } else {
          return this.send(404);
        }
      }
    });
  };

  exports.CertificateManager = CertificateManager;

  exports.CertificateFactory = CertificateFactory;

}).call(this);
