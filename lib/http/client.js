// Generated by CoffeeScript 1.7.1
(function() {
  var HttpClient, http;

  http = require("http");

  HttpClient = (function() {
    function HttpClient(host, port) {
      this.host = host;
      this.port = port;
    }

    HttpClient.prototype.get = function(path, headers, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return http.get({
        host: this.host,
        port: this.port,
        path: path,
        headers: headers
      }, function(result) {
        var body;
        body = "";
        result.on("data", function(chunk) {
          return body += chunk;
        });
        result.on("end", function() {
          var ctype;
          ctype = result.headers["content-type"].split(";");
          if (ctype[0].trim() === "application/json") {
            body = JSON.parse(body);
            if (callback != null) {
              return callback(null, body);
            }
          }
        });
        return result.on("error", function(error) {
          return callback(error, null);
        });
      });
    };

    HttpClient.prototype.post = function(path, data, headers, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.send(path, data, headers, "POST", callback);
    };

    HttpClient.prototype.put = function(path, data, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.send(path, data, headers, "PUT", callback);
    };

    HttpClient.prototype["delete"] = function(path, data, headers, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.send(path, data, headers, "DELETE", callback);
    };

    HttpClient.prototype.send = function(path, data, headers, method, callback) {
      var request;
      if (callback == null) {
        callback = function() {};
      }
      headers["content-type"] = "application/json";
      request = http.request({
        host: this.host,
        port: this.port,
        path: path,
        method: method,
        headers: headers
      }, function(result) {
        var body;
        body = "";
        result.on("data", function(chunk) {
          return body += chunk;
        });
        result.on("end", function() {
          var ctype;
          ctype = result.headers["content-type"].split(";");
          if ("application/json" === ctype[0].trim()) {
            body = JSON.parse(body);
            return callback(null, body);
          }
        });
        return result.on("error", function(error) {
          return callback(error, null);
        });
      });
      if (data) {
        request.write(JSON.stringify(data));
      }
      return request.end();
    };

    return HttpClient;

  })();

  exports.HttpClient = HttpClient;

}).call(this);
